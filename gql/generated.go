// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Autogenerated input type of ChangeUserStatus
type ChangeUserStatusInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
	Emoji string `json:"emoji"`
	// If set, the user status will not be shown after this date.
	ExpiresAt time.Time `json:"expiresAt"`
	// Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
	LimitedAvailability bool `json:"limitedAvailability"`
	// A short description of your current status.
	Message string `json:"message"`
	// The ID of the organization whose members will be allowed to see the status. If
	// omitted, the status will be publicly visible.
	OrganizationId string `json:"organizationId"`
}

// GetClientMutationId returns ChangeUserStatusInput.ClientMutationId, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetClientMutationId() string { return v.ClientMutationId }

// GetEmoji returns ChangeUserStatusInput.Emoji, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetEmoji() string { return v.Emoji }

// GetExpiresAt returns ChangeUserStatusInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetExpiresAt() time.Time { return v.ExpiresAt }

// GetLimitedAvailability returns ChangeUserStatusInput.LimitedAvailability, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetLimitedAvailability() bool { return v.LimitedAvailability }

// GetMessage returns ChangeUserStatusInput.Message, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetMessage() string { return v.Message }

// GetOrganizationId returns ChangeUserStatusInput.OrganizationId, and is useful for accessing the field via an interface.
func (v *ChangeUserStatusInput) GetOrganizationId() string { return v.OrganizationId }

// UpdateStatusChangeUserStatusChangeUserStatusPayload includes the requested fields of the GraphQL type ChangeUserStatusPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of ChangeUserStatus
type UpdateStatusChangeUserStatusChangeUserStatusPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationId string `json:"clientMutationId"`
	// Your updated status.
	Status UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus `json:"status"`
}

// GetClientMutationId returns UpdateStatusChangeUserStatusChangeUserStatusPayload.ClientMutationId, and is useful for accessing the field via an interface.
func (v *UpdateStatusChangeUserStatusChangeUserStatusPayload) GetClientMutationId() string {
	return v.ClientMutationId
}

// GetStatus returns UpdateStatusChangeUserStatusChangeUserStatusPayload.Status, and is useful for accessing the field via an interface.
func (v *UpdateStatusChangeUserStatusChangeUserStatusPayload) GetStatus() UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus {
	return v.Status
}

// UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus includes the requested fields of the GraphQL type UserStatus.
// The GraphQL type's documentation follows.
//
// The user's description of what they're currently doing.
type UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus struct {
	// A brief message describing what the user is doing.
	Message string `json:"message"`
	// If set, the status will not be shown after this date.
	ExpiresAt time.Time `json:"expiresAt"`
}

// GetMessage returns UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus.Message, and is useful for accessing the field via an interface.
func (v *UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus) GetMessage() string {
	return v.Message
}

// GetExpiresAt returns UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus.ExpiresAt, and is useful for accessing the field via an interface.
func (v *UpdateStatusChangeUserStatusChangeUserStatusPayloadStatusUserStatus) GetExpiresAt() time.Time {
	return v.ExpiresAt
}

// UpdateStatusResponse is returned by UpdateStatus on success.
type UpdateStatusResponse struct {
	// Update your status on GitHub.
	ChangeUserStatus UpdateStatusChangeUserStatusChangeUserStatusPayload `json:"changeUserStatus"`
}

// GetChangeUserStatus returns UpdateStatusResponse.ChangeUserStatus, and is useful for accessing the field via an interface.
func (v *UpdateStatusResponse) GetChangeUserStatus() UpdateStatusChangeUserStatusChangeUserStatusPayload {
	return v.ChangeUserStatus
}

// WhoAmIResponse is returned by WhoAmI on success.
type WhoAmIResponse struct {
	// The currently authenticated user.
	Viewer WhoAmIViewerUser `json:"viewer"`
}

// GetViewer returns WhoAmIResponse.Viewer, and is useful for accessing the field via an interface.
func (v *WhoAmIResponse) GetViewer() WhoAmIViewerUser { return v.Viewer }

// WhoAmIViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type WhoAmIViewerUser struct {
	Id string `json:"id"`
	// The user's public profile name.
	Name string `json:"name"`
}

// GetId returns WhoAmIViewerUser.Id, and is useful for accessing the field via an interface.
func (v *WhoAmIViewerUser) GetId() string { return v.Id }

// GetName returns WhoAmIViewerUser.Name, and is useful for accessing the field via an interface.
func (v *WhoAmIViewerUser) GetName() string { return v.Name }

// __UpdateStatusInput is used internally by genqlient
type __UpdateStatusInput struct {
	Input ChangeUserStatusInput `json:"input"`
}

// GetInput returns __UpdateStatusInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateStatusInput) GetInput() ChangeUserStatusInput { return v.Input }

func UpdateStatus(
	ctx context.Context,
	client graphql.Client,
	input ChangeUserStatusInput,
) (*UpdateStatusResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateStatus",
		Query: `
mutation UpdateStatus ($input: ChangeUserStatusInput!) {
	changeUserStatus(input: $input) {
		clientMutationId
		status {
			message
			expiresAt
		}
	}
}
`,
		Variables: &__UpdateStatusInput{
			Input: input,
		},
	}
	var err error

	var data UpdateStatusResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func WhoAmI(
	ctx context.Context,
	client graphql.Client,
) (*WhoAmIResponse, error) {
	req := &graphql.Request{
		OpName: "WhoAmI",
		Query: `
query WhoAmI {
	viewer {
		id
		name
	}
}
`,
	}
	var err error

	var data WhoAmIResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
